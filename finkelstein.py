# -*- coding: utf-8 -*-
"""finkelstein.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fTglFtublgvxEaZ89xJUpvgGxahQEDZl
"""

import numpy as np

m = 5
n = 100
delta = 0.01
d = [40,30,15,10,5]
com = np.zeros(n)
pop = np.arange(n)
v = 0
idx = 0
for i in d:
  com[idx:(idx+i)] = v
  idx += i
  v += 1

def compute_var(m,hist,mean,t):
  var = np.zeros(m)
  for i in range(t):
    var += (hist[i]-mean)**2
  var = var/t
  return var

hist = []
t=0
while True:
  t +=1
  person = np.random.choice(pop,1)
  community = com[person]
  vec = np.zeros(m)
  vec[int(community)] = 1
  hist.append(vec)
  mean = np.zeros(m)
  for i in range(len(hist)):
    mean += hist[i]
  mean = mean/t
  var = compute_var(m,hist,mean,t)
  beta = np.zeros(m)
  for i in range(m):
    beta[i] = np.sqrt(2*var[i]*(np.log(3/delta))/t) + 3*(np.log(3/delta))/t
  cmax = np.argmax(mean)
  ucbmax = 0
  for i in range(m):
    if not(i==cmax):
      ucb = mean[i]+beta[i]
      ucbmax = np.maximum(ucbmax,ucb)
  if (mean[cmax]-beta[cmax]) > ucbmax:
    print(t)
    print(mean[cmax],cmax)
    break

hist = []
t=0
while True:
  t += 1
  person1 = np.random.choice(pop,1)
  person2 = np.random.choice(pop,1)
  community = com[person1]
  vec = np.zeros(m)
  if person1 == person2:
    vec[int(community)] = 1  
  hist.append(vec)
  mean = np.zeros(m)
  for i in range(len(hist)):
    mean += hist[i]
  mean = mean/t
  var = compute_var(m,hist,mean,t)
  beta = np.zeros(m)
  for i in range(m):
    beta[i] = np.sqrt(2*var[i]*(np.log(3/delta))/t) + 3*(np.log(3/delta))/t
  cmax = np.argmax(mean)
  ucbmax = 0
  for i in range(m):
    if not(i==cmax):
      ucb = mean[i]+beta[i]
      ucbmax = np.maximum(ucbmax,ucb)
  if (mean[cmax]-beta[cmax]) > ucbmax:
    print(t)
    print(mean[cmax],cmax)
    break

